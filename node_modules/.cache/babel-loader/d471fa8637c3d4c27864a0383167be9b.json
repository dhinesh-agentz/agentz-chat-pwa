{"ast":null,"code":"import _classCallCheck from \"/home/agentz/Documents/Learning/newChat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/agentz/Documents/Learning/newChat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/agentz/Documents/Learning/newChat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/agentz/Documents/Learning/newChat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/agentz/Documents/Learning/newChat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/agentz/Documents/Learning/newChat/src/components/Chat/components/Chat.jsx\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { PureComponent } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Chat, _PureComponent);\n\n  function Chat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentMessages: _this.props.contacts[0].messages,\n      currentChat: _this.props.contacts[0].userName,\n      openContacts: false\n    };\n\n    _this.onOpenChat = function (contact, e) {\n      e.preventDefault();\n\n      var dialog = _this.props.contacts.find(function (c) {\n        return c.userName === contact;\n      }).messages;\n\n      var messages = dialog || null;\n\n      _this.setState({\n        currentChat: contact,\n        currentMessages: messages,\n        openContacts: false\n      });\n    };\n\n    _this.onOpenContacts = function () {\n      _this.setState({\n        openContacts: !_this.state.openContacts\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          contacts = _this$props.contacts;\n      var chatClass = classNames({\n        chat: true,\n        'chat--open': this.state.openContacts\n      });\n      var contactsClass = classNames({\n        'chat__contact-list': true,\n        'chat__contact-list--open': this.state.openContacts\n      });\n      return React.createElement(\"div\", {\n        className: chatClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: contactsClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(ChatSearch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat__contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Scrollbar, {\n        className: \"scroll chat__contacts-scroll\",\n        alwaysShowTracks: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, contacts.map(function (c, i) {\n        return React.createElement(\"button\", {\n          key: i,\n          onClick: function onClick(e) {\n            return _this2.onOpenChat(c.userName, e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(ChatContact, {\n          active: c.userName === _this2.state.currentChat,\n          contact: c,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }));\n      })))), this.state.currentChat === null ? React.createElement(\"div\", {\n        className: \"chat__dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(ChatTopbar, {\n        onClick: this.onOpenContacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat__dialog-select-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Select a chat to start messaging\"))) : React.createElement(\"div\", {\n        className: \"chat__dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(ChatTopbar, {\n        contact: contacts.find(function (c) {\n          return c.userName === _this2.state.currentChat;\n        }),\n        onClick: this.onOpenContacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(Scrollbar, {\n        className: \"scroll chat__scroll\",\n        alwaysShowTracks: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat__dialog-messages-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.currentMessages === null || this.state.currentMessages.length === 0 ? React.createElement(\"div\", {\n        className: \"chat__dialog-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat__dialog-messages-empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"No messages\"))) : React.createElement(\"div\", {\n        className: \"chat__dialog-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.currentMessages.map(function (m, i) {\n        return React.createElement(ChatBubble, {\n          key: i,\n          contact: m.userName === currentUser.userName ? currentUser : contacts.find(function (c) {\n            return c.userName === m.userName;\n          }),\n          message: m,\n          date: m,\n          active: m.userName === currentUser.userName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      })))), React.createElement(ChatField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Chat;\n}(PureComponent);\n\nChat.propTypes = {\n  currentUser: CurrentUserProps.isRequired,\n  contacts: ContactsProps.isRequired\n};\nexport { Chat as default };","map":{"version":3,"sources":["/home/agentz/Documents/Learning/newChat/src/components/Chat/components/Chat.jsx"],"names":["React","PureComponent","Scrollbar","classNames","ChatContact","ChatBubble","ChatSearch","ChatField","ChatTopbar","CurrentUserProps","ContactsProps","Chat","state","currentMessages","props","contacts","messages","currentChat","userName","openContacts","onOpenChat","contact","e","preventDefault","dialog","find","c","setState","onOpenContacts","currentUser","chatClass","chat","contactsClass","map","i","length","m","propTypes","isRequired"],"mappings":";;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,sCAAhD;;IAEqBC,I;;;;;;;;;;;;;;;;;UAMnBC,K,GAAQ;AACNC,MAAAA,eAAe,EAAE,MAAKC,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBC,QADlC;AAENC,MAAAA,WAAW,EAAE,MAAKH,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBG,QAF9B;AAGNC,MAAAA,YAAY,EAAE;AAHR,K;;UAMRC,U,GAAa,UAACC,OAAD,EAAUC,CAAV,EAAgB;AAC3BA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAMC,MAAM,GAAG,MAAKV,KAAL,CAAWC,QAAX,CAAoBU,IAApB,CAAyB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,QAAF,KAAeG,OAAnB;AAAA,OAA1B,EAAsDL,QAArE;;AACA,UAAMA,QAAQ,GAAGQ,MAAM,IAAI,IAA3B;;AACA,YAAKG,QAAL,CAAc;AACZV,QAAAA,WAAW,EAAEI,OADD;AAEZR,QAAAA,eAAe,EAAEG,QAFL;AAGZG,QAAAA,YAAY,EAAE;AAHF,OAAd;AAKD,K;;UAEDS,c,GAAiB,YAAM;AACrB,YAAKD,QAAL,CAAc;AAAER,QAAAA,YAAY,EAAE,CAAC,MAAKP,KAAL,CAAWO;AAA5B,OAAd;AACD,K;;;;;;;6BAEQ;AAAA;;AAAA,wBAC2B,KAAKL,KADhC;AAAA,UACCe,WADD,eACCA,WADD;AAAA,UACcd,QADd,eACcA,QADd;AAEP,UAAMe,SAAS,GAAG3B,UAAU,CAAC;AAC3B4B,QAAAA,IAAI,EAAE,IADqB;AAE3B,sBAAc,KAAKnB,KAAL,CAAWO;AAFE,OAAD,CAA5B;AAKA,UAAMa,aAAa,GAAG7B,UAAU,CAAC;AAC/B,8BAAsB,IADS;AAE/B,oCAA4B,KAAKS,KAAL,CAAWO;AAFR,OAAD,CAAhC;AAKA,aACE;AAAK,QAAA,SAAS,EAAEW,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAEE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,8BAArB;AAAoD,QAAA,gBAAgB,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGjB,QAAQ,CAACkB,GAAT,CAAa,UAACP,CAAD,EAAIQ,CAAJ;AAAA,eAEV;AAAQ,UAAA,GAAG,EAAEA,CAAb;AAAgB,UAAA,OAAO,EAAE,iBAAAZ,CAAC;AAAA,mBAAI,MAAI,CAACF,UAAL,CAAgBM,CAAC,CAACR,QAAlB,EAA4BI,CAA5B,CAAJ;AAAA,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAEI,CAAC,CAACR,QAAF,KAAe,MAAI,CAACN,KAAL,CAAWK,WAA/C;AAA4D,UAAA,OAAO,EAAES,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAFU;AAAA,OAAb,CADH,CADF,CAFF,CADF,EAcG,KAAKd,KAAL,CAAWK,WAAX,KAA2B,IAA3B,GACC;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAE,KAAKW,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,CAFF,CADD,GAQC;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAEb,QAAQ,CAACU,IAAT,CAAc,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACR,QAAF,KAAe,MAAI,CAACN,KAAL,CAAWK,WAA9B;AAAA,SAAf,CADX;AAEE,QAAA,OAAO,EAAE,KAAKW,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,qBAArB;AAA2C,QAAA,gBAAgB,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKhB,KAAL,CAAWC,eAAX,KAA+B,IAA/B,IAAuC,KAAKD,KAAL,CAAWC,eAAX,CAA2BsB,MAA3B,KAAsC,CAA7E,GACC;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,CADD,GAOC;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKvB,KAAL,CAAWC,eAAX,CAA2BoB,GAA3B,CAA+B,UAACG,CAAD,EAAIF,CAAJ;AAAA,eAC7B,oBAAC,UAAD;AACC,UAAA,GAAG,EAAEA,CADN;AAEC,UAAA,OAAO,EAAEE,CAAC,CAAClB,QAAF,KAAeW,WAAW,CAACX,QAA3B,GAAsCW,WAAtC,GACGd,QAAQ,CAACU,IAAT,CAAc,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACR,QAAF,KAAekB,CAAC,CAAClB,QAArB;AAAA,WAAf,CAHb;AAIC,UAAA,OAAO,EAAEkB,CAJV;AAKC,UAAA,IAAI,EAAEA,CALP;AAMC,UAAA,MAAM,EAAEA,CAAC,CAAClB,QAAF,KAAeW,WAAW,CAACX,QANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD6B;AAAA,OAA/B,CADH,CARJ,CADF,CALF,EA4BE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BF,CAtBJ,CADF;AAwDD;;;;EA/F+BjB,a;;AAAbU,I,CACZ0B,S,GAAY;AACjBR,EAAAA,WAAW,EAAEpB,gBAAgB,CAAC6B,UADb;AAEjBvB,EAAAA,QAAQ,EAAEL,aAAa,CAAC4B;AAFP,C;SADA3B,I","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\n\r\nimport React, { PureComponent } from 'react';\r\nimport Scrollbar from 'react-smooth-scrollbar';\r\nimport classNames from 'classnames';\r\nimport ChatContact from './ChatContact';\r\nimport ChatBubble from './ChatBubble';\r\nimport ChatSearch from './ChatSearch';\r\nimport ChatField from './ChatField';\r\nimport ChatTopbar from './ChatTopbar';\r\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\r\n\r\nexport default class Chat extends PureComponent {\r\n  static propTypes = {\r\n    currentUser: CurrentUserProps.isRequired,\r\n    contacts: ContactsProps.isRequired,\r\n  };\r\n\r\n  state = {\r\n    currentMessages: this.props.contacts[0].messages,\r\n    currentChat: this.props.contacts[0].userName,\r\n    openContacts: false,\r\n  };\r\n\r\n  onOpenChat = (contact, e) => {\r\n    e.preventDefault();\r\n    const dialog = this.props.contacts.find(c => c.userName === contact).messages;\r\n    const messages = dialog || null;\r\n    this.setState({\r\n      currentChat: contact,\r\n      currentMessages: messages,\r\n      openContacts: false,\r\n    });\r\n  };\r\n\r\n  onOpenContacts = () => {\r\n    this.setState({ openContacts: !this.state.openContacts });\r\n  };\r\n\r\n  render() {\r\n    const { currentUser, contacts } = this.props;\r\n    const chatClass = classNames({\r\n      chat: true,\r\n      'chat--open': this.state.openContacts,\r\n    });\r\n\r\n    const contactsClass = classNames({\r\n      'chat__contact-list': true,\r\n      'chat__contact-list--open': this.state.openContacts,\r\n    });\r\n\r\n    return (\r\n      <div className={chatClass}>\r\n        <div className={contactsClass}>\r\n          <ChatSearch />\r\n          <div className=\"chat__contacts\">\r\n            <Scrollbar className=\"scroll chat__contacts-scroll\" alwaysShowTracks>\r\n              {contacts.map((c, i) =>\r\n                (\r\n                  <button key={i} onClick={e => this.onOpenChat(c.userName, e)}>\r\n                    <ChatContact active={c.userName === this.state.currentChat} contact={c} />\r\n                  </button>\r\n                ))}\r\n            </Scrollbar>\r\n          </div>\r\n        </div>\r\n        {this.state.currentChat === null ?\r\n          <div className=\"chat__dialog\">\r\n            <ChatTopbar onClick={this.onOpenContacts} />\r\n            <div className=\"chat__dialog-select-message\">\r\n              <p>Select a chat to start messaging</p>\r\n            </div>\r\n          </div>\r\n          :\r\n          <div className=\"chat__dialog\">\r\n            <ChatTopbar\r\n              contact={contacts.find(c => c.userName === this.state.currentChat)}\r\n              onClick={this.onOpenContacts}\r\n            />\r\n            <Scrollbar className=\"scroll chat__scroll\" alwaysShowTracks>\r\n              <div className=\"chat__dialog-messages-wrap\">\r\n                {this.state.currentMessages === null || this.state.currentMessages.length === 0 ?\r\n                  <div className=\"chat__dialog-messages\">\r\n                    <div className=\"chat__dialog-messages-empty\">\r\n                      <p>No messages</p>\r\n                    </div>\r\n                  </div>\r\n                  :\r\n                  <div className=\"chat__dialog-messages\">\r\n                    {this.state.currentMessages.map((m, i) =>\r\n                      (<ChatBubble\r\n                        key={i}\r\n                        contact={m.userName === currentUser.userName ? currentUser :\r\n                                    contacts.find(c => c.userName === m.userName)}\r\n                        message={m}\r\n                        date={m}\r\n                        active={m.userName === currentUser.userName}\r\n                      />))}\r\n                  </div>\r\n                }\r\n              </div>\r\n            </Scrollbar>\r\n            <ChatField />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}